import org.asciidoctor.gradle.AsciidoctorTask

// // gradle build script for the arc42 template
// ("plain" subproject, creating the templage without help text)
//
// free software - without guarantee, use at your own risk
// ========================================================

// set subproject build directory
def localBuildDir = [:]

def language = '%LANG%'
def projectName = '%TYPE%'
//if (!project?.ext?.config) {
//    project.ext.config = new ConfigSlurper().parse file('buildconfig.groovy').text
//}
logger.info "*"*80
logger.info project.name
logger.info globalBuildDir.path

config.formats.each { format, params ->
    localBuildDir[format] = globalBuildDir.path + '/'+language+'/'+format+'/' + projectName
    new File(localBuildDir[format]).mkdirs()
}
apply plugin: 'asciidoctor'

// empty build task for netbeans
task build () << {}

// common settings  
tasks.withType(AsciidoctorTask) { docTask ->  
    sourceDir = project.file('./src')
    options = [  
        logDocuments: true,  
        attributes: [  
            toc         : 'left',
            doctype     : 'book',
            icons       : 'font',
            sectlink    : true,
            sectanchors : true,
            numbered    : true,
            imagesdir   : 'images',
        ]  
    ]  
}

task copyAsciidoc (
        type: Copy,
        description: 'asciidoc is the master, but we copy it to the build directory, too'
) {
    from project.file('./src/.')
    into localBuildDir.asciidoc
}
defaultTasks 'arc42'

task copyImages(
        description: 'copy images into build output folder so that references can be resolved '
) {
    localBuildDir.each { format, dir ->
        if (config.formats[format].imageFolder) {
            def taskName = "copyImagesFor_" + projectName + "_" + language + "_" + format
            tasks.create(name: taskName, type: Copy) {
                logger.info ">>>> copyImages from " + file('images')
                logger.info ">>>>              to " + file(dir+'images')
                inputs.dir file('images')
                outputs.dir file(dir + '/images')
                from file('images')
                into file(dir + '/images')
                doLast {}
            }
            tasks.copyImages.dependsOn << taskName
        }
    }
}

task generateHTML (
    type: AsciidoctorTask,
    dependsOn: [copyImages, copyAsciidoc],
    description: 'use html5 as asciidoc backend') {
    sourceDocumentName = project.file('./src/arc42-template.adoc')
    outputDir = new File( localBuildDir.html )
    backend = 'html5'  
}

task generateDocbook (
        type: AsciidoctorTask,
        dependsOn: [copyImages, copyAsciidoc],
        description: 'use docbook as asciidoc backend') {
    sourceDocumentName = project.file('./src/arc42-template.adoc')
    if (localBuildDir.docbook) {
        outputDir = new File(localBuildDir.docbook)
        backend = 'docbook'
    } else {
        println """
    Failed to generate DocBook
    it seems that a format which needs DocBook as intermediate format is configured in buildconfig.groovy
    please add
        'docbook': [imageFolder: true]
    to the list of formats
"""
        //end with exception :-)
        new File(localBuildDir.docbook)
    }
}
//Multipage-Version
task generateDocbookMP (
        type: AsciidoctorTask,
        dependsOn: [copyImages, copyAsciidoc],
        description: 'use docbook as asciidoc backend') {
    if (localBuildDir.docbook) {
        outputDir = new File(localBuildDir.docbook+'MP')
        backend = 'docbook'
    } else {
        println """
    Failed to generate DocBook
    it seems that a format which needs DocBook as intermediate format is configured in buildconfig.groovy
    please add
        'docbook': [imageFolder: true]
    to the list of formats
"""
        //end with exception :-)
        new File(localBuildDir.docbook)
    }
}

task convert2Latex (
        dependsOn: [copyImages, generateDocbook ],
        type: Exec
) {
    executable = "pandoc"
    args = ['-r','docbook',
            '-s',
            '-t','latex',
            '-o',localBuildDir.latex+'/arc42-template.tex',
            localBuildDir.docbook+'/arc42-template.xml']
}
task convert2Docx (
        dependsOn: [copyImages, generateDocbook ],
        type: Exec
) {
    executable = "pandoc"
    args = ['-r','docbook',
            '-t','docx',
            '-o',localBuildDir.docx+'/arc42-template.docx',
            localBuildDir.docbook+'/arc42-template.xml']
}
task convert2Epub (
    dependsOn: [copyImages, generateDocbook ],
    type: Exec
) {
    //commandLine "pandoc -r arc42-template.xml -o arc42-template.docx "
    executable = "pandoc"
    args = ['-r','docbook',
            '-t','epub',
            '-o',localBuildDir.epub+'/arc42-template.epub',
        localBuildDir.docbook+'/arc42-template.xml']
}
task convert2Markdown (
    dependsOn: [copyImages, generateDocbook ],
    type: Exec
) {
    //commandLine "pandoc -r arc42-template.xml -o arc42-template.docx "
    executable = "pandoc"
    args = ['-r','docbook',
            '-t','markdown',
            '-o',localBuildDir.markdown+'/arc42-template.md',
        localBuildDir.docbook+'/arc42-template.xml']
}
task convert2MarkdownMP (
        dependsOn: [copyImages, generateDocbookMP ]
) {
    doLast {
        def i = 0
        def sourceFolder = file(localBuildDir.docbook + 'MP/.')
        sourceFolder.eachFile { myFile ->
            if (myFile.name.endsWith('.xml')) {
                def taskName = 'convert2Markdown_file' + i++
                new File(localBuildDir.markdownMP + '/').mkdirs()
                tasks.create(name: taskName, type: Exec, dependsOn: [copyImages, generateDocbookMP]) {
                    //commandLine "pandoc -r arc42-template.xml -o arc42-template.docx "
                    executable = "pandoc"
                    args = ['-r', 'docbook',
                            '-t', 'markdown',
                            '-o', localBuildDir.markdownMP + '/' + myFile.name-'xml'+'md',
                            myFile.canonicalPath]
                }
                tasks."$taskName".execute()
            }
        }
    }
}
task convert2Textile (
        dependsOn: [copyImages, generateDocbookMP ]
) {
    doLast {
        def i = 0
        def sourceFolder = file(localBuildDir.docbook + 'MP/.')
        sourceFolder.eachFile { myFile ->
            if (myFile.name.endsWith('.xml')) {
                def taskName = 'convert2Textile_file' + i++
                new File(localBuildDir.textile + '/').mkdirs()
                tasks.create(name: taskName, type: Exec, dependsOn: [copyImages, generateDocbookMP]) {
                    //commandLine "pandoc -r arc42-template.xml -o arc42-template.docx "
                    executable = "pandoc"
                    args = ['-r', 'docbook',
                            '-t', 'textile',
                            '-o', localBuildDir.textile + '/'+myFile.name-'xml'+'textile',
                            myFile.canonicalPath]
                }
                tasks."$taskName".execute()
            }
        }
    }
}
task export2Confluence (
    dependsOn: [generateHTML]
) {

}
task arc42(
    dependsOn: [copyImages, generateHTML, export2Confluence, convert2Latex, convert2Docx, convert2Epub, convert2Markdown, convert2MarkdownMP, convert2Textile, copyAsciidoc],
    description: 'collects all required tasks for creating arc42 documentation',
    group: 'arc42-template'
) << {
    println "globalBuildDir = ${globalBuildDir}"
    println "localBuildDir = ${localBuildDir}"
}
