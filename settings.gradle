//

def config = new ConfigSlurper().parse file('buildconfig.groovy').text

//let's fetch all generated subprojects
def target = file(config.goldenMaster.targetPath)
def goldenMaster = config.goldenMaster.sourcePath

logger.debug "*"*80
logger.debug target.canonicalPath
logger.debug target.exists().toString()
logger.debug "*"*80


// Function to load version properties
def loadVersionProperties(goldenMaster, language) {
    def props = new Properties()
    def propFile = file(goldenMaster+"/${language}/version.properties")
    if (!propFile.exists()) {
        throw new GradleException("Version properties file not found for language ${language}: ${propFile}")
    } else {
        println "Loading version properties from ${propFile}"
    }
    propFile.withInputStream { 
        props.load(new InputStreamReader(it, "UTF-8")) // Use UTF-8 when reading properties
    }
    println "Loaded version properties for ${language}: ${props}"
    return [
        'revnumber': props.revnumber ?: 'UNKNOWN',
        'revdate': props.revdate ?: 'UNKNOWN',
        'revremark': props.revremark ?: ''
    ]
}

if (target.exists()) {
    target.eachFileRecurse { f ->
    logger.info f.name
        if (f.name == 'src') {
	        //copy build file
            def parentFilePath = f.parentFile.path
            def language = parentFilePath.split('[/\\\\]')[-3]
            def docFormat = parentFilePath.split('[/\\\\]')[-1]
            def versionProps = loadVersionProperties(goldenMaster, language)
            new File(parentFilePath +"/build.gradle")
                .write(
                    new File("subBuild.gradle").text
                    .replaceAll('%LANG%', language)
                    .replaceAll('%TYPE%', docFormat)
                    .replaceAll('%REVNUMBER%', versionProps.revnumber)
                    .replaceAll('%REVDATE%', versionProps.revdate)
                    .replaceAll('%REVREMARK%', versionProps.revremark)
                )
            println "Creating build.gradle for ${language}:${docFormat} in ${versionProps.revnumber} (${versionProps.revnumber})"
            def projectIdentifier = "${language}:${docFormat}"
            logger.info "include subproject ${projectIdentifier} in ${parentFilePath}"
            include(projectIdentifier)
            project(":${projectIdentifier}").projectDir = new File(parentFilePath)
        }
    }
}
include 'publish'
