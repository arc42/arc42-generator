// gradle build script for the arc42 template family
//
// free software - without guarantee, use at your own risk
// ========================================================

apply plugin: 'base'

buildscript {
    // these are the BUILDSCRIPT deps - required to execute
    // build targets and -operations
    repositories {
        mavenCentral()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
/*
The RepositoryHandler.jcenter() method has been deprecated.
This is scheduled to be removed in Gradle 8.0.
JFrog announced JCenter's sunset in February 2021. Use mavenCentral() instead.
* */
//        jcenter()
    }

    dependencies {
        classpath( 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.1' )

    }
}


// set common output directory for all subprojects
project.ext.globalBuildDir = layout.buildDirectory

logger.info "globalBuildDir = "+globalBuildDir

project.description = """
${'='*80}
This project builds a set of different arc42-templates from the golden master (asciidoc)
${'='*80}
"""

project.ext.config = new ConfigSlurper().parse file('buildconfig.groovy').text
project.ext.languages = []
new File(config.goldenMaster.sourcePath).eachDir { dir ->
    if (dir.name =~ /^[A-Z]{2}$/) {
        languages << dir.name
    }
}

task createTemplatesFromGoldenMaster (
    description: 'takes the golden master and creates a version with help and without help for each available language',
    group: 'arc42-template'
)  {

    inputs.dir  file(config.goldenMaster.sourcePath)
    outputs.dir file(config.goldenMaster.targetPath+'/'+languages[0])

    doLast {
        //convention over configuration:
        //let's fetch the available languages from the source dir
        logger.lifecycle "found templates in the following languages: "+languages
        languages.each { language ->
            def pathToGoldenMaster = config.goldenMaster.sourcePath + '/' + language + '/asciidoc/'
            def sourceSub = file(pathToGoldenMaster+'/src/.')
            def sourceMain = file(pathToGoldenMaster+'/.')
            logger.info "copy golden master from ${sourceMain.path} ..."
            //the list of features/tags available in the golden master
            def allFeatures = config.goldenMaster.allFeatures
            //the template styles with their corresponding features
            def templateStyles = config.goldenMaster.templateStyles
            templateStyles.each { templateName, featuresWanted ->
                def featuresToRemove = allFeatures - featuresWanted
                def pathToTarget = config.goldenMaster.targetPath +'/'+language+'/asciidoc/'+ templateName
                def target = file(pathToTarget + '/src/.')
                target.mkdirs()
                logger.info "                     to ${target.path}"
                logger.lifecycle "create %buildDir%${target.path - layout.buildDirectory}"
                [sourceMain,sourceSub].each { source ->
                    source.eachFile { sourceFile ->
                        if (sourceFile.name.endsWith('.adoc') || sourceFile.name.endsWith('.config')) {
                            def targetFile = file(target.path + '/' + sourceFile.name)
                            def template = sourceFile.getText('utf-8')
                            featuresToRemove.each { feature ->
                                template = template.replaceAll(/(?ms)\[role="arc42/ + feature + /"\][ \r\n]+[*]{4}.*?[*]{4}/, '')
                            }
                            if ("help" in featuresToRemove) {
                                template = template.replaceAll(/(?ms)ifdef::arc42help\[\]/, '')
                                template = template.replaceAll(/(?ms)endif::arc42help\[\]/, '')
                            }
                            targetFile.write(template, 'utf-8')
                        }
                    }
                }
                def pathToDEGoldenMaster = config.goldenMaster.sourcePath + '/' + 'DE' + '/asciidoc/' 
                //copy images
                logger.info "copy images folder from " + pathToDEGoldenMaster + '/../../images'
                logger.info "                     to " + pathToTarget + '/images'
                if (templateName=='plain') {
                    //only copy the logo
                    copy {
                        from pathToDEGoldenMaster + '/../../images/arc42-logo.png'
                        into pathToTarget + '/images'
                    }
                } else {
                    //copy logo plus example images
                    copy {
                        from pathToDEGoldenMaster + '/../../images/.'
                        into pathToTarget + '/images'
                        include "**/*-${language}.*"
                        include "**/*-EN.*"
                        include "**/arc42-logo.png"
                    }
                }
            }
        }
    }
}

task createDistribution (
    dependsOn: [],
    description: 'bundles the converted templates into downloadable zip files',
    group: 'arc42-template'
) {
    outputs.dir file(config.distribution.targetPath)
    languages.each { language ->
        config.goldenMaster.templateStyles.each { projectName, styles ->
            def shortName = projectName.replaceAll("^.*[/\\\\]", "").replaceAll("[^a-zA-Z]", "")
            config.formats.each { format, params ->
                def taskName = "createDistributionFor_${language}_${shortName}_$format"
                tasks.create(name: taskName, type: Zip) {
                    archiveBaseName = "arc42-template-${language}-${shortName}-$format"
                    archiveFileName = "${archiveBaseName}.zip"
                    destinationDirectory = file(config.distribution.targetPath)
                    //archivePath = "$shortName/$format"
                    include "**/*"
                    from "./build/$language/$format/$projectName"
                    doLast {}
                }
                //tasks[taskName].execute()
                tasks.createDistribution.dependsOn << taskName
            }
        }
    }
}


//the following line does not work :-(
//findProject('publish').tasks.publishGhPages.mustRunAfter createDistribution
